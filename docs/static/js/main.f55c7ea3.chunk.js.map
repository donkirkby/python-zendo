{"version":3,"sources":["rule_runner.py","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleRuleChange","rule_text","setState","rule","handleInputChange","evt","new_input","target","value","handleVisibilityChange","state","is_rule_visible","visibility_button_name","handleNewInput","is_rule_followed","window","inputs","concat","text","follows_rule","undefined","languagePluginLoader","console","log","then","fetch","rule_runner","response","rule_runner_source","pyodide","runPython","react_default","a","createElement","className","style","textAlign","type","onClick","lib_default","onChange","mode","theme","fontSize","showPrintMargin","showGutter","highlightActiveLine","editorProps","$blockScrolling","Infinity","visibility","rule_visibility","setOptions","showLineNumbers","tabSize","map","entry","entry_index","key","display","placeholder","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2RCuHzBC,2BA9Gb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAsBFI,iBAAmB,SAAAC,GACjBR,EAAKS,SAAS,CACZC,KAAMF,KAzBIR,EA6BdW,kBAAoB,SAAAC,GAClBZ,EAAKS,SAAS,CACZI,UAAWD,EAAIE,OAAOC,SA/BZf,EAmCdgB,uBAAyB,WACnBhB,EAAKiB,MAAMC,gBACblB,EAAKS,SAAS,CACZS,iBAAiB,EACjBC,uBAAwB,cAG1BnB,EAAKS,SAAS,CACZS,iBAAiB,EACjBC,uBAAwB,eA5ChBnB,EAkDdoB,eAAiB,WACf,GAA6B,KAAzBpB,EAAKiB,MAAMJ,UAAf,CAGA,IAAIQ,EAAmBC,OAAOD,iBAC1BrB,EAAKiB,MAAMP,KACXV,EAAKiB,MAAMJ,WACfb,EAAKS,SAAS,CACVI,UAAW,GACXU,OAAQvB,EAAKiB,MAAMM,OAAOC,OAAO,CAAC,CAC9BC,KAAMzB,EAAKiB,MAAMJ,UACjBa,aAAcL,SA3DtBrB,EAAKiB,MAAQ,CACXP,KAAM,GACNQ,iBAAiB,EACjBC,uBAAwB,YACxBN,UAAW,GACXU,OAAQ,SAG0BI,IAAhCL,OAAOM,qBACPC,QAAQC,IAAI,0BAEZR,OAAOM,qBAAqBG,KAAK,WAC7BC,MAAMC,KAAaF,KAAK,SAAUG,GAC9B,OAAOA,EAAST,SACjBM,KAAK,SAAUI,GACdb,OAAOc,QAAQC,UAAUF,OAjBzBnC,wEAmEZ,OACEsC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMC,MAAO,CAACC,UAAW,UACtCL,EAAAC,EAAAC,cAAA,UACII,KAAK,SACLC,QAAS1C,KAAKa,uBACdyB,UAAU,SACZtC,KAAKc,MAAME,wBACZhB,KAAKc,MAAMC,iBAAmBoB,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAC3BxB,MAAOZ,KAAKc,MAAMP,KAClBqC,SAAU5C,KAAKI,iBACfyC,KAAK,SACLC,MAAM,SACNC,SAAU,GACVC,iBAAiB,EACjBC,YAAY,EACZC,qBAAqB,EACrBC,YAAa,CACTC,gBAAiBC,IACjBC,WAAYtD,KAAKc,MAAMyC,iBAE3BC,WAAY,CACRC,iBAAiB,EACjBC,QAAS,KAEfvB,EAAAC,EAAAC,cAAA,UACCrC,KAAKc,MAAMM,OAAOuC,IAAI,SAACC,EAAOC,GAAR,OACnB1B,EAAAC,EAAAC,cAAA,MAAIyB,IAAK,OAASD,GAChB1B,EAAAC,EAAAC,cAAA,OAAKyB,IAAK,YAAcD,EAAatB,MAAO,CAACwB,QAAS,WAAYH,EAAMtC,MACxEa,EAAAC,EAAAC,cAAA,gBAASuB,EAAMrC,aAAgB,IAAQ,SAI7CY,EAAAC,EAAAC,cAAA,SACII,KAAK,OACLuB,YAAY,mBACZpD,MAAOZ,KAAKc,MAAMJ,UAClBkC,SAAU5C,KAAKQ,oBACnB2B,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASC,QAAS1C,KAAKiB,eAAgBqB,UAAU,SAA9D,gBAzGQ2B,cCIEC,QACW,cAA7B/C,OAAOgD,SAASC,UAEe,UAA7BjD,OAAOgD,SAASC,UAEhBjD,OAAOgD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC","file":"static/js/main.f55c7ea3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rule_runner.29c3d9f3.py\";","import React, { Component } from 'react';\nimport AceEditor from 'react-ace';\nimport './App.css';\nimport rule_runner from './rule_runner.py';\n\nimport 'brace/mode/python';\nimport 'brace/theme/github';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      rule: \"\",\n      is_rule_visible: true,\n      visibility_button_name: \"Hide Rule\",\n      new_input: \"\",\n      inputs: []  // [{ text: \"...\", follows_rule: true}]\n    };\n\n    if (window.languagePluginLoader === undefined) {\n        console.log('Pyodide is not loaded.');\n    } else {\n        window.languagePluginLoader.then(function() {\n            fetch(rule_runner).then(function (response) {\n                return response.text();\n            }).then(function (rule_runner_source) {\n                window.pyodide.runPython(rule_runner_source);\n            });\n        });\n    }\n  }\n\n  handleRuleChange = rule_text => {\n    this.setState({\n      rule: rule_text\n    });\n  };\n\n  handleInputChange = evt => {\n    this.setState({\n      new_input: evt.target.value\n    });\n  };\n\n  handleVisibilityChange = () => {\n    if (this.state.is_rule_visible) {\n      this.setState({\n        is_rule_visible: false,\n        visibility_button_name: \"Show Rule\"\n      });\n    } else {\n      this.setState({\n        is_rule_visible: true,\n        visibility_button_name: \"Hide Rule\"\n      });\n    }\n\n  };\n\n  handleNewInput = () => {\n    if (this.state.new_input === \"\") {\n        return;\n    }\n    let is_rule_followed = window.is_rule_followed(\n        this.state.rule,\n        this.state.new_input);\n    this.setState({\n        new_input: \"\",\n        inputs: this.state.inputs.concat([{\n            text: this.state.new_input,\n            follows_rule: is_rule_followed\n        }])\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\" style={{textAlign: \"start\"}}>\n        <button\n            type=\"button\"\n            onClick={this.handleVisibilityChange}\n            className=\"small\"\n        >{this.state.visibility_button_name}</button>\n        {this.state.is_rule_visible && <AceEditor\n            value={this.state.rule}\n            onChange={this.handleRuleChange}\n            mode=\"python\"\n            theme=\"github\"\n            fontSize={18}\n            showPrintMargin={true}\n            showGutter={true}\n            highlightActiveLine={true}\n            editorProps={{\n                $blockScrolling: Infinity,\n                visibility: this.state.rule_visibility\n            }}\n            setOptions={{\n                showLineNumbers: true,\n                tabSize: 4,\n            }}/>}\n          <ul>\n          {this.state.inputs.map((entry, entry_index) => (\n              <li key={\"item\" + entry_index}>\n                <pre key={\"item_text\" + entry_index} style={{display: \"inline\"}}>{entry.text}</pre>\n                <span> {(entry.follows_rule && \"Y\") || \"N\"}</span>\n              </li>\n          ))}\n          </ul>\n          <input\n              type=\"text\"\n              placeholder=\"Type input here.\"\n              value={this.state.new_input}\n              onChange={this.handleInputChange}/>\n          <button type=\"button\" onClick={this.handleNewInput} className=\"small\">Tell</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}